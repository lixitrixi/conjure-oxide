var searchIndex = new Map(JSON.parse('[\
["chuffed_rs",{"doc":"","t":"CCFHHHFFFHISSSSFFFHFHHHIIHHFSSHFHHHHHHHHHHHFISSSSSFFFUFFFISSSSSSSSFISSSSSSSSSSSSSSSSISSSSSFFOOOOOOOOOOOHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHONNOONNNHNONNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNHNOOONHNNNNNNNNNNNNNNNNNNNNNNONHOOOONNNNNHHHHOHHHNNOOOOOOOOOONNNNNNNNNOOONHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOHFOONOHHHHHHH","n":["bindings","wrappers","BoolView","BoolView_attach","BoolView_detach","BoolView_getScore","Branching","Branching__bindgen_vtable","Clause","Clause_debug","ConLevel","ConLevel_CL_BND","ConLevel_CL_DEF","ConLevel_CL_DOM","ConLevel_CL_VAL","DecInfo","DummyProblem","IntVar","IntVar_IntVar","IntVar_PropInfo","IntVar_allowSet","IntVar_attach","IntVar_branch","IntVar_const_iterator","IntVar_const_reverse_iterator","IntVar_getScore","IntVar_initVals","IntVar_iterator","IntVar_max_limit","IntVar_min_limit","IntVar_remVal","IntVar_reverse_iterator","IntVar_setMax","IntVar_setMin","IntVar_setVal","IntVar_simplifyWatches","IntVar_specialiseToEL","IntVar_specialiseToLL","IntVar_specialiseToSL","IntVar_updateFixed","IntVar_updateMax","IntVar_updateMin","IntVar_wakePropagators","Lit","PreferredVal","PreferredVal_PV_MAX","PreferredVal_PV_MEDIAN","PreferredVal_PV_MIN","PreferredVal_PV_SPLIT_MAX","PreferredVal_PV_SPLIT_MIN","Propagator","Propagator__bindgen_vtable","Reason","Reason__bindgen_ty_1","Reason__bindgen_ty_1__bindgen_ty_1","Tchar","Tint","ValBranch","ValBranch_VAL_DEFAULT","ValBranch_VAL_MAX","ValBranch_VAL_MEDIAN","ValBranch_VAL_MIDDLE","ValBranch_VAL_MIN","ValBranch_VAL_RANDOM","ValBranch_VAL_SPLIT_MAX","ValBranch_VAL_SPLIT_MIN","Var","VarBranch","VarBranch_VAR_ACTIVITY","VarBranch_VAR_DEFAULT","VarBranch_VAR_DEGREE_MAX","VarBranch_VAR_DEGREE_MIN","VarBranch_VAR_INORDER","VarBranch_VAR_MAX_MAX","VarBranch_VAR_MAX_MIN","VarBranch_VAR_MIN_MAX","VarBranch_VAR_MIN_MIN","VarBranch_VAR_PSEUDO_COST","VarBranch_VAR_RANDOM","VarBranch_VAR_REDUCED_COST","VarBranch_VAR_REGRET_MAX_MAX","VarBranch_VAR_REGRET_MIN_MAX","VarBranch_VAR_SIZE_MAX","VarBranch_VAR_SIZE_MIN","VarType","VarType_BOOL_VAR","VarType_INT_VAR","VarType_INT_VAR_EL","VarType_INT_VAR_LL","VarType_INT_VAR_SL","__BindgenBitfieldUnit","__IncompleteArrayField","__bindgen_anon_1","_base","_base","_base","_bitfield_1","_bitfield_1","_bitfield_align_1","_bitfield_align_1","_phantom_0","a","activity","all_different","all_in_scip","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attach","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch_IntVar","callback","cap","changes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","createVar","createVars","createVars1","createVars2","createVars3","d","d1","d2","data","data","debug","default","default","destroy_vec_intvar","detach","eflags","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_bit","get_idx","hash","in_queue","in_queue","in_scip","initVals","int_plus","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","last_solution_value","learnt","make_vec_intvar","max","max0","min","min0","new","new","new","new_bitfield_1","new_bitfield_1","new_dummy_problem","new_xyz_problem","output_vars","output_vars1","p","p_addVars","p_print","p_setcallback","padding","partial_cmp","pinfo","pos","preferred_val","priority","prop_id","pt","s","satisfied","sbps_value_selection","searchVars","set","set_bit","set_d1","set_d2","set_learnt","set_padding","set_sz","set_temp_expl","set_type","shadow_val","should_be_decidable","should_be_learnable","simplifyWatches","solve_xyz","specialiseToEL","specialiseToLL","specialiseToSL","sz","sz","temp_expl","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","updateFixed","updateMax","updateMin","v","v","v","val","val","val","vals","var","var","var","var_id","var_sym_break","vec","vtable_","vtable_","wakePropagators","x","all_different_wrapper","branch_wrapper","create_var","create_vars","int_plus_wrapper","output_vars_wrapper","var_sym_break_wrapper"],"q":[[0,"chuffed_rs"],[2,"chuffed_rs::bindings"],[429,"chuffed_rs::wrappers"],[436,"std::os::raw"],[437,"core::clone"],[438,"core::cmp"],[439,"core::cmp"],[440,"core::cmp"],[441,"core::fmt"],[442,"core::convert"],[443,"core::hash"],[444,"core::cmp"],[445,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,33,4,34,25,17,25,17,32,16,34,0,34,1,1,1,1,4,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,0,0,21,32,34,8,10,11,12,13,14,15,16,17,18,19,20,21,8,10,11,12,13,14,15,16,17,18,19,20,21,8,0,0,0,0,0,16,17,17,32,25,25,8,1,0,4,18,8,8,1,32,10,11,12,13,14,25,17,5,33,4,34,18,19,20,21,52,20,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,8,8,0,8,5,34,34,34,0,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,25,0,34,34,34,34,8,1,34,25,17,0,0,0,0,18,0,0,0,25,8,34,18,34,5,5,16,4,5,34,21,8,8,17,17,25,25,25,25,17,34,34,34,34,0,34,34,34,25,32,25,8,10,11,12,13,14,15,16,17,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,17,12,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,34,34,10,11,4,53,12,19,34,53,12,19,34,0,0,13,5,34,14,0,0,0,0,0,0,0],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````````{{{b{c}}}{}{}}{{{b{c}}d}{{f{c}}}{}}10{{hjll}n}{ce{}{}}0000000000000000000000000000000000000000000`````{{{A`{c}}}{{A`{c}}}Ab}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{{ce}n{}{}}000000000000{{{A`{c}}{A`{c}}}BlBn}``````{BbC`}0``{Cbn}{{}{{A`{c}}}Cd}{{}{{b{c}}}Cd}`{{hjll}n}`{{{A`{c}}{A`{c}}}CfCh}{{{A`{c}}Cj}ClCn}{{{b{c}}Cj}Cl{}}{{{D`{c}}Cj}ClCn}{{AdCj}Cl}{{AfCj}Cl}{{AhCj}Cl}{{AjCj}Cl}{{AlCj}Cl}{{CbCj}Cl}{{BbCj}Cl}{{jCj}Cl}{{DbCj}Cl}{{hCj}Cl}{{DdCj}Cl}{{BdCj}Cl}{{BfCj}Cl}{{BhCj}Cl}{{BjCj}Cl}``{cc{}}000000000000000000000{{{A`{c}}dDf}Dh{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}d}Cf{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}`{{{A`{c}}e}nDnE`}```{{DdCf}n}`{ce{}{}}000000000000000000000`{CbC`}`````{c{{A`{c}}}{}}{{}{{b{c}}}{}}{{ll}Dd}{{C`C`C`C`}{{A`{{Eb{Df}}}}}}{{C`C`C`}{{A`{{Eb{Df}}}}}}````````5{{{A`{c}}{A`{c}}}{{Ed{Bl}}}Ef}``````````{{{A`{c}}dDfDh}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}dCf}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{BbC`}n}0{{CbC`}n}0001```{Ddl}`{Ddn}0{{DdD`}n}=`=>>>>>>>>>>>>>{c{{Eh{e}}}{}{}}0000000000000000000000000000000000000000000{BbC`}`{cEj{}}000000000000000000000444```````````````4`{{D`El}n}{{D`EnF`}n}{{FbFbCf}Dd}{{FbFbFbCf}D`}{{DdDdDd}n}{D`n}0","c":[],"p":[[5,"__IncompleteArrayField",2],[1,"usize"],[1,"slice"],[5,"BoolView",2],[5,"Propagator",2],[8,"c_int",436],[1,"unit"],[5,"__BindgenBitfieldUnit",2],[10,"Clone",437],[5,"Tchar",2],[5,"Tint",2],[5,"DecInfo",2],[5,"Branching",2],[5,"Lit",2],[5,"Reason",2],[20,"Reason__bindgen_ty_1",2],[5,"Reason__bindgen_ty_1__bindgen_ty_1",2],[5,"IntVar_PropInfo",2],[5,"IntVar_iterator",2],[5,"IntVar_reverse_iterator",2],[5,"DummyProblem",2],[6,"Ordering",438],[10,"Ord",438],[8,"c_uint",436],[5,"Clause",2],[10,"Default",439],[1,"bool"],[10,"PartialEq",438],[5,"Formatter",440],[8,"Result",440],[10,"Debug",440],[5,"vec",2],[5,"Var",2],[5,"IntVar",2],[1,"u8"],[1,"u64"],[10,"AsRef",441],[10,"AsMut",441],[10,"Hash",442],[10,"Hasher",442],[1,"array"],[6,"Option",443],[10,"PartialOrd",438],[6,"Result",444],[5,"TypeId",445],[8,"ConLevel",2],[8,"VarBranch",2],[8,"ValBranch",2],[1,"i32"],[5,"Branching__bindgen_vtable",2],[5,"Propagator__bindgen_vtable",2],[8,"IntVar_const_reverse_iterator",2],[8,"IntVar_const_iterator",2]],"b":[]}],\
["conjure_core",{"doc":"","t":"ECCCPPPPPFGPGPPPPPPPFGPPPGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFGPONNNNNNNNNNNNNNNONNNNNNNNNNPPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Solver","ast","rule","solvers","And","BoolDomain","Bounded","ConstantBool","ConstantInt","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","IntDomain","Leq","Lt","MachineName","Model","Name","Neq","Not","Or","Range","Reference","Single","Sum","SumGeq","SumLeq","UserName","add_constraint","add_variable","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","new","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","sub_expressions","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_domain","variables","with_sub_expressions","Rule","RuleApplicationError","RuleNotApplicable","application","apply","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","from","from","into","into","name","new","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","KissSAT","Minion","Solver","SolverIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","from","from","from_str","into","into","into_iter","iter","len","next","next_back","nth","size_hint","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"conjure_core"],[4,"conjure_core::ast"],[135,"conjure_core::rule"],[165,"conjure_core::solvers"],[199,"core::clone"],[200,"core::cmp"],[201,"core::result"],[202,"serde::de"],[203,"serde::de"],[204,"core::fmt"],[205,"core::option"],[206,"serde::ser"],[207,"serde::ser"],[208,"alloc::string"],[209,"core::any"],[210,"core::fmt"]],"d":["","","","","<strong>Supported by:</strong> SAT.","","","","<strong>Supported by:</strong> Minion, SAT.","","","","Solver Support","","","<strong>Supported by:</strong> Minion.","","","","","","","","<strong>Supported by:</strong> SAT.","<strong>Supported by:</strong> SAT.","","<strong>Supported by:</strong> Minion.","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a vector of references to the sub-expressions of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of the same expression type with the given …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","All supported solvers.","An iterator over the variants of Solver","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,6,7,2,2,0,0,2,0,2,2,2,6,2,2,4,0,0,2,2,2,0,2,7,2,2,2,4,1,1,1,4,5,6,7,2,1,4,5,6,7,2,1,4,5,6,7,2,1,4,5,6,7,2,4,1,1,1,4,5,6,7,2,5,1,4,5,6,7,2,1,4,4,5,5,6,7,2,2,1,4,5,6,7,2,4,1,4,5,6,7,2,1,4,1,4,5,6,7,2,2,1,4,5,6,7,2,4,5,2,1,4,5,6,7,2,1,4,5,6,7,2,1,4,5,6,7,2,1,1,2,0,0,26,25,25,26,25,26,25,25,25,26,26,25,25,26,25,26,25,25,25,25,26,25,26,25,26,25,26,25,29,29,0,0,29,28,29,28,28,28,29,29,28,29,28,29,29,28,28,29,28,28,28,28,28,28,29,29,29,28,29,28,29,28],"f":"````````````````````````````````{{bd}f}{{bhj}f}{ce{}{}}00000000000{bb}{hh}{jj}{ll}{{{n{c}}}{{n{c}}}A`}{dd}{{ce}f{}{}}00000{{hh}Ab}`{{}b}{c{{Ad{b}}}Af}{c{{Ad{h}}}Af}{c{{Ad{j}}}Af}{c{{Ad{l}}}Af}{c{{Ad{{n{e}}}}}AfAh}{c{{Ad{d}}}Af}`{{bb}Aj}{{hh}Aj}{{jj}Aj}{{ll}Aj}{{{n{c}}{n{c}}}AjAl}{{dd}Aj}{{bAn}B`}{{hAn}B`}0{{jAn}B`}0{{lAn}B`}{{{n{c}}An}B`Bb}{{dAn}B`}0{cc{}}00000{{hc}fBd}{ce{}{}}00000{{}b}{{hh}{{Bf{Ab}}}}{{bc}AdBh}{{hc}AdBh}{{jc}AdBh}{{lc}AdBh}{{{n{c}}e}AdBjBh}{{dc}AdBh}{d{{Bl{d}}}}999999{cBn{}}00{c{{Ad{e}}}{}{}}00000000000{cC`{}}00000{{bhl}f}`{{d{Bl{d}}}d}````{{Cbd}{{Ad{dCd}}}}????{CbCb}{{ce}f{}{}}{{CdAn}B`}0{{CbAn}B`}0{cc{}}0{ce{}{}}0`{CfCb}1<<;;;;::````1111{ChCh}6{{CjAn}B`}{{CjAn}{{Ad{fCl}}}}{{ChAn}B`}66{Cf{{Ad{Cjc}}}{}}666{{}Ch}{ChCn}{Ch{{Bf{c}}}{}}0{{ChCn}{{Bf{c}}}{}}{Ch{{D`{Cn{Bf{Cn}}}}}};{cBn{}}6{c{{Ad{e}}}{}{}}000{cC`{}}0","c":[],"p":[[5,"Model",4],[6,"Expression",4],[1,"unit"],[6,"Name",4],[5,"DecisionVariable",4],[6,"Domain",4],[6,"Range",4],[10,"Clone",199],[6,"Ordering",200],[6,"Result",201],[10,"Deserializer",202],[10,"Deserialize",202],[1,"bool"],[10,"PartialEq",200],[5,"Formatter",203],[8,"Result",203],[10,"Debug",203],[10,"Hasher",204],[6,"Option",205],[10,"Serializer",206],[10,"Serialize",206],[5,"Vec",207],[5,"String",208],[5,"TypeId",209],[5,"Rule",135],[6,"RuleApplicationError",135],[1,"str"],[5,"SolverIter",165],[6,"Solver",165],[5,"Error",203],[1,"usize"],[1,"tuple"]],"b":[[75,"impl-Debug-for-Name"],[76,"impl-Display-for-Name"],[77,"impl-Debug-for-DecisionVariable"],[78,"impl-Display-for-DecisionVariable"],[81,"impl-Display-for-Expression"],[82,"impl-Debug-for-Expression"],[146,"impl-Debug-for-RuleApplicationError"],[147,"impl-Display-for-RuleApplicationError"],[148,"impl-Display-for-Rule%3C\'a%3E"],[149,"impl-Debug-for-Rule%3C\'a%3E"],[175,"impl-Debug-for-Solver"],[176,"impl-Display-for-Solver"]]}],\
["conjure_oxide",{"doc":"","t":"EPPFGNNCNNNNNNONNNCCNNNNNNNNNNCNCNNNNNNNNNNOPPPPPFGPGPPPPPPPFGPPPGPPPPPPNNNNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONPGPPPPPINNNNNNNNNNNNNHHKPFPPGNNONNNNMNCCNNNNNOGPPPPPNNNNNNNNNNFNNONNNNONNNN","n":["Error","KissSAT","Minion","Model","Solver","add_constraint","add_variable","ast","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","constraints","default","deserialize","eq","error","find_conjure","fmt","fmt","fmt","from","from","from_str","into","into","iter","new","parse","serialize","solvers","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","update_domain","variables","And","BoolDomain","Bounded","ConstantBool","ConstantInt","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","IntDomain","Leq","Lt","MachineName","Model","Name","Neq","Not","Or","Range","Reference","Single","Sum","SumGeq","SumLeq","UserName","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","partial_cmp","serialize","serialize","serialize","serialize","serialize","sub_expressions","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","variables","with_sub_expressions","Err","Error","JSON","NotImplemented","Ok","Other","Parse","Result","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","conjure_executable","model_from_json","FromConjureModel","InvalidInstance","Model","NotSupported","Other","SolverError","borrow","borrow_mut","constraints","fmt","fmt","from","from","from_conjure","into","kissat","minion","source","to_string","try_from","try_into","type_id","variables","CNFError","ClauseIndexNotFound","NestedAnd","UnexpectedExpression","UnexpectedExpressionInsideNot","VariableNameNotFound","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","MinionModel","borrow","borrow_mut","constraints","default","from","from_conjure","into","named_variables","new","try_from","try_into","type_id"],"q":[[0,"conjure_oxide"],[44,"conjure_oxide::ast"],[156,"conjure_oxide::error"],[177,"conjure_oxide::find_conjure"],[178,"conjure_oxide::parse"],[179,"conjure_oxide::solvers"],[202,"conjure_oxide::solvers::kissat"],[218,"conjure_oxide::solvers::minion"],[231,"core::result"],[232,"serde::de"],[233,"core::fmt"],[234,"core::fmt"],[235,"serde::ser"],[236,"alloc::string"],[237,"core::any"],[238,"core::clone"],[239,"core::cmp"],[240,"serde::de"],[241,"core::option"],[242,"serde::ser"],[243,"core::fmt"],[244,"anyhow"],[245,"core::error"],[246,"anyhow"]],"d":["","","","","All supported solvers.","","","","","","","","","","","","","","Top-level error types for Conjure-Oxide.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","<strong>Supported by:</strong> SAT.","","","","<strong>Supported by:</strong> Minion, SAT.","","","","Solver Support","","","<strong>Supported by:</strong> Minion.","","","","","","","","<strong>Supported by:</strong> SAT.","<strong>Supported by:</strong> SAT.","","<strong>Supported by:</strong> Minion.","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns a vector of references to the sub-expressions of …","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of the same expression type with the given …","Contains the error value","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Checks if the conjure executable is present in PATH and if …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Solver interface to minion_rs.","","","","","","","Error type for CNF adapter","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A lookup table of all named variables.","","","",""],"i":[0,11,11,0,0,1,1,0,1,11,1,11,1,1,1,1,1,1,0,0,1,11,11,1,11,11,1,11,11,1,0,1,0,1,11,1,11,11,1,11,1,11,1,1,2,17,18,2,2,0,0,2,0,2,2,2,17,2,2,4,0,0,2,2,2,0,2,18,2,2,2,4,4,5,17,18,2,4,5,17,18,2,4,5,17,18,2,4,5,17,18,2,4,1,4,5,17,18,2,5,4,5,17,18,2,4,4,5,5,17,18,2,2,4,5,17,18,2,4,4,5,17,18,2,4,4,5,17,18,2,2,4,5,17,18,2,4,5,2,4,5,17,18,2,4,5,17,18,2,4,5,17,18,2,1,2,34,0,28,28,34,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,35,0,35,35,0,35,35,1,35,35,35,35,36,35,0,0,35,35,35,35,35,1,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38],"f":"`````{{bd}f}{{bhj}f}`{ce{}{}}000{bb}{{ce}f{}{}}`{{}b}{c{{l{b}}}n}{{bb}A`}``{{bAb}{{l{fAd}}}}{{AfAb}{{l{fAd}}}}0{cc{}}0{Ah{{l{Af}}}}99{{}Aj}7`{{bc}lAl}`;{cAn{}}{c{{l{e}}}{}{}}0400{cB`{}}0{{bhBb}f}`````````````````````````````??????????{hh}{jj}{BbBb}{{{Bd{c}}}{{Bd{c}}}Bf}{dd}{{ce}f{}{}}0000{{hh}Bh}`{c{{l{h}}}n}{c{{l{j}}}n}{c{{l{Bb}}}n}{c{{l{{Bd{e}}}}}nBj}{c{{l{d}}}n}`{{hh}A`}{{jj}A`}{{BbBb}A`}{{{Bd{c}}{Bd{c}}}A`Bl}{{dd}A`}{{hAb}{{l{fAd}}}}0{{jAb}{{l{fAd}}}}0{{BbAb}{{l{fAd}}}}{{{Bd{c}}Ab}{{l{fAd}}}Bn}{{dAb}{{l{fAd}}}}0{cc{}}0000{{hc}fC`}{ce{}{}}0000{{hh}{{Cb{Bh}}}}{{hc}lAl}{{jc}lAl}{{Bbc}lAl}{{{Bd{c}}e}lCdAl}{{dc}lAl}{d{{Cf{d}}}}77777{cAn{}}00{c{{l{e}}}{}{}}000000000{cB`{}}0000`{{d{Cf{d}}}d}````````;;{{ChAb}Cj}0{ClCh}{CnCh}{cc{}}?{Ch{{Cb{D`}}}}8776{{}{{Db{f}}}}{Ah{{Dd{b}}}}``````{ce{}{}}0`{{DfAb}Cj}05{CnDf}{b{{l{DhDf}}}}3``{Df{{Cb{D`}}}}?>>=```````44{{DjAb}Cj}095{cAn{}}{c{{l{e}}}{}{}}0{cB`{}}`88`{{}Dl}={b{{l{DlDf}}}}:`1332","c":[],"p":[[5,"Model",0],[6,"Expression",44],[1,"unit"],[6,"Name",44],[5,"DecisionVariable",44],[6,"Result",231],[10,"Deserializer",232],[1,"bool"],[5,"Formatter",233],[5,"Error",233],[6,"Solver",0],[1,"str"],[5,"SolverIter",234],[10,"Serializer",235],[5,"String",236],[5,"TypeId",237],[6,"Domain",44],[6,"Range",44],[10,"Clone",238],[6,"Ordering",239],[10,"Deserialize",232],[10,"PartialEq",239],[10,"Debug",233],[10,"Hasher",240],[6,"Option",241],[10,"Serialize",235],[5,"Vec",242],[6,"Error",156],[8,"Result",233],[5,"Error",243],[5,"Error",244],[10,"Error",245],[8,"Result",244],[8,"Result",156],[6,"SolverError",179],[10,"FromConjureModel",179],[6,"CNFError",202],[5,"MinionModel",218]],"b":[[21,"impl-Display-for-Solver"],[22,"impl-Debug-for-Solver"],[105,"impl-Display-for-Name"],[106,"impl-Debug-for-Name"],[107,"impl-Display-for-DecisionVariable"],[108,"impl-Debug-for-DecisionVariable"],[111,"impl-Display-for-Expression"],[112,"impl-Debug-for-Expression"],[166,"impl-Debug-for-Error"],[167,"impl-Display-for-Error"],[168,"impl-From%3CError%3E-for-Error"],[169,"impl-From%3CError%3E-for-Error"],[188,"impl-Display-for-SolverError"],[189,"impl-Debug-for-SolverError"],[210,"impl-Display-for-CNFError"],[211,"impl-Debug-for-CNFError"]]}],\
["conjure_rules",{"doc":"A decentralised rule registry for Conjure Oxide","t":"HHX","n":["get_rule_by_name","get_rules","register_rule"],"q":[[0,"conjure_rules"],[3,"conjure_core::rule"],[4,"core::option"],[5,"alloc::vec"]],"d":["","Returns a copied <code>Vec</code> of all rules registered with the …","This procedural macro registers a decorated function with …"],"i":[0,0,0],"f":"{b{{f{d}}}}{{}{{h{d}}}}`","c":[],"p":[[1,"str"],[5,"Rule",3],[6,"Option",4],[5,"Vec",5]],"b":[]}],\
["minion_rs",{"doc":"This crate provides low level Rust bindings to the Minion …","t":"ICCHPPPGPGPPPFPPPPFGGINNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNPGPPGPPNNNNNNNNNNNNNNNNNNNNNNNN","n":["Callback","ast","error","run_minion","Bool","Bool","Bound","Constant","ConstantAsVar","Constraint","Discrete","Ineq","Integer","Model","NameRef","SparseBound","SumGeq","SumLeq","SymbolTable","Var","VarDomain","VarName","add_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","contains","default","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_variable_order","get_vartype","into","into","into","into","into","into","named_variables","new","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","InvalidInstance","MinionError","NotImplemented","Other","RuntimeError","RuntimeError","UnknownError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"minion_rs"],[4,"minion_rs::ast"],[80,"minion_rs::error"],[111,"core::result"],[112,"core::option"],[113,"core::fmt"],[114,"core::fmt"],[115,"core::any"],[116,"anyhow"],[117,"core::error"],[118,"alloc::string"]],"d":["Callback function used to capture results from minion as …","The Model Syntax tree for the Minion bindings.","Error types for Minion bindings.","Run Minion on the given Model.","","","","","","","","","","","","","","","","A variable can either be a named variable, or an anomynous …","","","Creates a new variable and adds it to the symbol table. If …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A lookup table of all named variables.","","","","","","","","","","","","","","","","","","","","","The model given to Minion is invalid.","A wrapper over all errors thrown by <code>minion_rs</code>.","","","RuntimeErrors are thrown by Minion during execution.","","An unknown error has occurred.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,11,8,8,0,15,0,8,12,11,0,15,8,12,12,0,0,0,0,6,1,6,12,15,11,8,1,6,12,15,11,8,8,8,1,6,1,11,12,15,11,8,1,6,12,15,11,8,6,6,1,6,12,15,11,8,1,1,8,1,6,12,15,11,8,1,6,12,15,11,8,1,6,12,15,11,8,18,0,4,4,0,4,18,4,18,4,18,4,4,18,18,4,4,4,18,18,4,18,4,4,18,4,18,4,18,4,18],"f":"```{{bd}{{j{fh}}}}``````````````````{{lnA`}{{Ab{f}}}}{ce{}{}}00000000000{A`A`}{{ce}f{}{}}`{{ln}Ad}{{}b}{{AfAf}Ad}{{AhAj}Al}{{AnAj}Al}{{AfAj}Al}{{A`Aj}Al}{cc{}}00000{l{{B`{n}}}}{{ln}{{Ab{A`}}}}<<<<<<`8<{c{{j{e}}}{}{}}00000000000{cBb{}}00000```````>>>>{{hAj}Al}0{{BdAj}Al}06{Bdh}{Bfh}8{BhBd}{ce{}{}}0{h{{Ab{Bj}}}}{cBl{}}0999988","c":[],"p":[[5,"Model",4],[8,"Callback",0],[1,"unit"],[6,"MinionError",80],[6,"Result",111],[5,"SymbolTable",4],[8,"VarName",4],[6,"VarDomain",4],[6,"Option",112],[1,"bool"],[6,"Constant",4],[6,"Constraint",4],[5,"Formatter",113],[8,"Result",113],[6,"Var",4],[5,"Vec",114],[5,"TypeId",115],[6,"RuntimeError",80],[5,"Error",116],[1,"u32"],[10,"Error",117],[5,"String",118]],"b":[[91,"impl-Display-for-MinionError"],[92,"impl-Debug-for-MinionError"],[93,"impl-Display-for-RuntimeError"],[94,"impl-Debug-for-RuntimeError"],[96,"impl-From%3CRuntimeError%3E-for-MinionError"],[97,"impl-From%3CError%3E-for-MinionError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
