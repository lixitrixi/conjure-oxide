var searchIndex = new Map(JSON.parse('[\
["chuffed_rs",{"doc":"","t":"CCFHHHFFFHISSSSFFFHFHHHIIHHFSSHFHHHHHHHHHHHFISSSSSFFFUFFFISSSSSSSSFISSSSSSSSSSSSSSSSISSSSSFFOOOOOOOOOOOHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHONNOONNNHNONNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNHNOOONHNNNNNNNNNNNNNNNNNNNNNNONHOOOONNNNNHHHHOHHHNNOOOOOOOOOONNNNNNNNNOOONHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOHFOONOHHHHHHH","n":["bindings","wrappers","BoolView","BoolView_attach","BoolView_detach","BoolView_getScore","Branching","Branching__bindgen_vtable","Clause","Clause_debug","ConLevel","ConLevel_CL_BND","ConLevel_CL_DEF","ConLevel_CL_DOM","ConLevel_CL_VAL","DecInfo","DummyProblem","IntVar","IntVar_IntVar","IntVar_PropInfo","IntVar_allowSet","IntVar_attach","IntVar_branch","IntVar_const_iterator","IntVar_const_reverse_iterator","IntVar_getScore","IntVar_initVals","IntVar_iterator","IntVar_max_limit","IntVar_min_limit","IntVar_remVal","IntVar_reverse_iterator","IntVar_setMax","IntVar_setMin","IntVar_setVal","IntVar_simplifyWatches","IntVar_specialiseToEL","IntVar_specialiseToLL","IntVar_specialiseToSL","IntVar_updateFixed","IntVar_updateMax","IntVar_updateMin","IntVar_wakePropagators","Lit","PreferredVal","PreferredVal_PV_MAX","PreferredVal_PV_MEDIAN","PreferredVal_PV_MIN","PreferredVal_PV_SPLIT_MAX","PreferredVal_PV_SPLIT_MIN","Propagator","Propagator__bindgen_vtable","Reason","Reason__bindgen_ty_1","Reason__bindgen_ty_1__bindgen_ty_1","Tchar","Tint","ValBranch","ValBranch_VAL_DEFAULT","ValBranch_VAL_MAX","ValBranch_VAL_MEDIAN","ValBranch_VAL_MIDDLE","ValBranch_VAL_MIN","ValBranch_VAL_RANDOM","ValBranch_VAL_SPLIT_MAX","ValBranch_VAL_SPLIT_MIN","Var","VarBranch","VarBranch_VAR_ACTIVITY","VarBranch_VAR_DEFAULT","VarBranch_VAR_DEGREE_MAX","VarBranch_VAR_DEGREE_MIN","VarBranch_VAR_INORDER","VarBranch_VAR_MAX_MAX","VarBranch_VAR_MAX_MIN","VarBranch_VAR_MIN_MAX","VarBranch_VAR_MIN_MIN","VarBranch_VAR_PSEUDO_COST","VarBranch_VAR_RANDOM","VarBranch_VAR_REDUCED_COST","VarBranch_VAR_REGRET_MAX_MAX","VarBranch_VAR_REGRET_MIN_MAX","VarBranch_VAR_SIZE_MAX","VarBranch_VAR_SIZE_MIN","VarType","VarType_BOOL_VAR","VarType_INT_VAR","VarType_INT_VAR_EL","VarType_INT_VAR_LL","VarType_INT_VAR_SL","__BindgenBitfieldUnit","__IncompleteArrayField","__bindgen_anon_1","_base","_base","_base","_bitfield_1","_bitfield_1","_bitfield_align_1","_bitfield_align_1","_phantom_0","a","activity","all_different","all_in_scip","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attach","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch_IntVar","callback","cap","changes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","createVar","createVars","createVars1","createVars2","createVars3","d","d1","d2","data","data","debug","default","default","destroy_vec_intvar","detach","eflags","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_bit","get_idx","hash","in_queue","in_queue","in_scip","initVals","int_plus","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","last_solution_value","learnt","make_vec_intvar","max","max0","min","min0","new","new","new","new_bitfield_1","new_bitfield_1","new_dummy_problem","new_xyz_problem","output_vars","output_vars1","p","p_addVars","p_print","p_setcallback","padding","partial_cmp","pinfo","pos","preferred_val","priority","prop_id","pt","s","satisfied","sbps_value_selection","searchVars","set","set_bit","set_d1","set_d2","set_learnt","set_padding","set_sz","set_temp_expl","set_type","shadow_val","should_be_decidable","should_be_learnable","simplifyWatches","solve_xyz","specialiseToEL","specialiseToLL","specialiseToSL","sz","sz","temp_expl","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","updateFixed","updateMax","updateMin","v","v","v","val","val","val","vals","var","var","var","var_id","var_sym_break","vec","vtable_","vtable_","wakePropagators","x","all_different_wrapper","branch_wrapper","create_var","create_vars","int_plus_wrapper","output_vars_wrapper","var_sym_break_wrapper"],"q":[[0,"chuffed_rs"],[2,"chuffed_rs::bindings"],[429,"chuffed_rs::wrappers"],[436,"std::os::raw"],[437,"core::clone"],[438,"core::cmp"],[439,"core::cmp"],[440,"core::cmp"],[441,"core::fmt"],[442,"core::convert"],[443,"core::hash"],[444,"core::cmp"],[445,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,33,4,34,25,17,25,17,32,16,34,0,34,1,1,1,1,4,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,0,0,21,32,34,8,10,11,12,13,14,15,16,17,18,19,20,21,8,10,11,12,13,14,15,16,17,18,19,20,21,8,0,0,0,0,0,16,17,17,32,25,25,8,1,0,4,18,8,8,1,32,10,11,12,13,14,25,17,5,33,4,34,18,19,20,21,52,20,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,8,8,0,8,5,34,34,34,0,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,25,0,34,34,34,34,8,1,34,25,17,0,0,0,0,18,0,0,0,25,8,34,18,34,5,5,16,4,5,34,21,8,8,17,17,25,25,25,25,17,34,34,34,34,0,34,34,34,25,32,25,8,10,11,12,13,14,15,16,17,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,17,12,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,34,34,10,11,4,53,12,19,34,53,12,19,34,0,0,13,5,34,14,0,0,0,0,0,0,0],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````````{{{b{c}}}{}{}}{{{b{c}}d}{{f{c}}}{}}10{{hjll}n}{ce{}{}}0000000000000000000000000000000000000000000`````{{{A`{c}}}{{A`{c}}}Ab}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{{ce}n{}{}}000000000000{{{A`{c}}{A`{c}}}BlBn}``````{BbC`}0``{Cbn}{{}{{A`{c}}}Cd}{{}{{b{c}}}Cd}`{{hjll}n}`{{{A`{c}}{A`{c}}}CfCh}{{{A`{c}}Cj}ClCn}{{{b{c}}Cj}Cl{}}{{{D`{c}}Cj}ClCn}{{AdCj}Cl}{{AfCj}Cl}{{AhCj}Cl}{{AjCj}Cl}{{AlCj}Cl}{{CbCj}Cl}{{BbCj}Cl}{{jCj}Cl}{{DbCj}Cl}{{hCj}Cl}{{DdCj}Cl}{{BdCj}Cl}{{BfCj}Cl}{{BhCj}Cl}{{BjCj}Cl}``{cc{}}000000000000000000000{{{A`{c}}dDf}Dh{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}d}Cf{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}`{{{A`{c}}e}nDnE`}```{{DdCf}n}`{ce{}{}}000000000000000000000`{CbC`}`````{c{{A`{c}}}{}}{{}{{b{c}}}{}}{{ll}Dd}{{C`C`C`C`}{{A`{{Eb{Df}}}}}}{{C`C`C`}{{A`{{Eb{Df}}}}}}````````5{{{A`{c}}{A`{c}}}{{Ed{Bl}}}Ef}``````````{{{A`{c}}dDfDh}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}dCf}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{BbC`}n}0{{CbC`}n}0001```{Ddl}`{Ddn}0{{DdD`}n}=`=>>>>>>>>>>>>>{c{{Eh{e}}}{}{}}0000000000000000000000000000000000000000000{BbC`}`{cEj{}}000000000000000000000444```````````````4`{{D`El}n}{{D`EnF`}n}{{FbFbCf}Dd}{{FbFbFbCf}D`}{{DdDdDd}n}{D`n}0","c":[],"p":[[5,"__IncompleteArrayField",2],[1,"usize"],[1,"slice"],[5,"BoolView",2],[5,"Propagator",2],[8,"c_int",436],[1,"unit"],[5,"__BindgenBitfieldUnit",2],[10,"Clone",437],[5,"Tchar",2],[5,"Tint",2],[5,"DecInfo",2],[5,"Branching",2],[5,"Lit",2],[5,"Reason",2],[20,"Reason__bindgen_ty_1",2],[5,"Reason__bindgen_ty_1__bindgen_ty_1",2],[5,"IntVar_PropInfo",2],[5,"IntVar_iterator",2],[5,"IntVar_reverse_iterator",2],[5,"DummyProblem",2],[6,"Ordering",438],[10,"Ord",438],[8,"c_uint",436],[5,"Clause",2],[10,"Default",439],[1,"bool"],[10,"PartialEq",438],[5,"Formatter",440],[8,"Result",440],[10,"Debug",440],[5,"vec",2],[5,"Var",2],[5,"IntVar",2],[1,"u8"],[1,"u64"],[10,"AsRef",441],[10,"AsMut",441],[10,"Hash",442],[10,"Hasher",442],[1,"array"],[6,"Option",443],[10,"PartialOrd",438],[6,"Result",444],[5,"TypeId",445],[8,"ConLevel",2],[8,"VarBranch",2],[8,"ValBranch",2],[1,"i32"],[5,"Branching__bindgen_vtable",2],[5,"Propagator__bindgen_vtable",2],[8,"IntVar_const_reverse_iterator",2],[8,"IntVar_const_iterator",2]],"b":[]}],\
["conjure_core",{"doc":"","t":"ECCCPPPPGPFGPGPPPPPPPPFGPPPPGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFGPONNNNNNNNNNNNNNNONNNNNNNNNNPPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Solver","ast","rule","solvers","And","Bool","BoolDomain","Bounded","Constant","Constant","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","Int","IntDomain","Leq","Lt","MachineName","Model","Name","Neq","Not","Nothing","Or","Range","Reference","Single","Sum","SumEq","SumGeq","SumLeq","UserName","add_constraint","add_constraints","add_variable","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_constraints_vec","hash","into","into","into","into","into","into","into","is_constant","new","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_constraints","sub_expressions","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_domain","variables","with_sub_expressions","Rule","RuleApplicationError","RuleNotApplicable","application","apply","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","from","from","into","into","name","new","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","KissSAT","Minion","Solver","SolverIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","from","from","from_str","into","into","into_iter","iter","len","next","next_back","nth","size_hint","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"conjure_core"],[4,"conjure_core::ast"],[159,"conjure_core::rule"],[189,"conjure_core::solvers"],[223,"alloc::vec"],[224,"core::clone"],[225,"core::cmp"],[226,"core::result"],[227,"serde::de"],[228,"serde::de"],[229,"core::fmt"],[230,"core::option"],[231,"serde::ser"],[232,"serde::ser"],[233,"core::any"],[234,"core::fmt"]],"d":["","","","","<strong>Supported by:</strong> SAT.","","","","","<strong>Supported by:</strong> Minion, SAT.","","","","Solver Support","","","<strong>Supported by:</strong> Minion.","","","","","","","","","<strong>Supported by:</strong> SAT.","Represents an empty expressionNB: we only expect this at …","<strong>Supported by:</strong> SAT.","","<strong>Supported by:</strong> Minion.","","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns a vector of references to the sub-expressions of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of the same expression type with the given …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","All supported solvers.","An iterator over the variants of Solver","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,10,7,8,0,2,0,0,2,0,2,2,2,10,7,2,2,5,0,0,2,2,2,2,0,2,8,2,2,2,2,5,1,1,1,1,5,6,7,8,10,2,1,5,6,7,8,10,2,1,5,6,7,8,10,2,1,5,6,7,8,10,2,5,1,1,1,5,6,7,8,10,2,6,1,5,6,7,8,10,2,1,5,5,6,6,7,8,10,10,2,2,1,5,6,7,8,10,2,1,5,1,5,6,7,8,10,2,2,1,5,1,5,6,7,8,10,2,1,2,1,5,6,7,8,10,2,5,6,10,2,1,5,6,7,8,10,2,1,5,6,7,8,10,2,1,5,6,7,8,10,2,1,1,2,0,0,27,26,26,27,26,27,26,26,26,27,27,26,26,27,26,27,26,26,26,26,27,26,27,26,27,26,27,26,30,30,0,0,30,29,30,29,29,29,30,30,29,30,29,30,30,29,29,30,29,29,29,29,29,29,30,30,30,29,30,29,30,29],"f":"````````````````````````````````````{{bd}f}{{b{h{d}}}f}{{bjl}f}{ce{}{}}0000000000000{bb}{jj}{ll}{nn}{{{A`{c}}}{{A`{c}}}Ab}{AdAd}{dd}{{ce}f{}{}}000000{{jj}Af}`{{}b}{c{{Ah{b}}}Aj}{c{{Ah{j}}}Aj}{c{{Ah{l}}}Aj}{c{{Ah{n}}}Aj}{c{{Ah{{A`{e}}}}}AjAl}{c{{Ah{Ad}}}Aj}{c{{Ah{d}}}Aj}`{{bb}An}{{jj}An}{{ll}An}{{nn}An}{{{A`{c}}{A`{c}}}AnB`}{{AdAd}An}{{dd}An}{{bBb}Bd}{{jBb}Bd}0{{lBb}Bd}0{{nBb}Bd}{{{A`{c}}Bb}BdBf}{{AdBb}Bd}0{{dBb}Bd}0{cc{}}000000{b{{h{d}}}}{{jc}fBh}{ce{}{}}000000{dAn}{{}b}{{jj}{{Bj{Af}}}}{{bc}AhBl}{{jc}AhBl}{{lc}AhBl}{{nc}AhBl}{{{A`{c}}e}AhBnBl}{{Adc}AhBl}{{dc}AhBl}{{b{h{d}}}f}{d{{Bj{{h{d}}}}}}<<<<<<<{cC`{}}000{c{{Ah{e}}}{}{}}0000000000000{cCb{}}000000{{bjn}f}`{{d{h{d}}}d}````{{Cdd}{{Ah{dCf}}}}{ce{}{}}000{CdCd}{{ce}f{}{}}{{CfBb}Bd}0{{CdBb}Bd}0{cc{}}055`{ChCd}6<<;;;;::````6666{CjCj}5{{ClBb}{{Ah{fCn}}}}{{ClBb}Bd}{{CjBb}Bd}55{Ch{{Ah{Clc}}}{}};;;{{}Cj}{CjD`}{Cj{{Bj{c}}}{}}0{{CjD`}{{Bj{c}}}{}}{Cj{{Db{D`{Bj{D`}}}}}}{ce{}{}}{cC`{}}7{c{{Ah{e}}}{}{}}000{cCb{}}0","c":[],"p":[[5,"Model",4],[6,"Expression",4],[1,"unit"],[5,"Vec",223],[6,"Name",4],[5,"DecisionVariable",4],[6,"Domain",4],[6,"Range",4],[10,"Clone",224],[6,"Constant",4],[6,"Ordering",225],[6,"Result",226],[10,"Deserializer",227],[10,"Deserialize",227],[1,"bool"],[10,"PartialEq",225],[5,"Formatter",228],[8,"Result",228],[10,"Debug",228],[10,"Hasher",229],[6,"Option",230],[10,"Serializer",231],[10,"Serialize",231],[5,"String",232],[5,"TypeId",233],[5,"Rule",159],[6,"RuleApplicationError",159],[1,"str"],[5,"SolverIter",189],[6,"Solver",189],[5,"Error",228],[1,"usize"],[1,"tuple"]],"b":[[86,"impl-Display-for-Name"],[87,"impl-Debug-for-Name"],[88,"impl-Debug-for-DecisionVariable"],[89,"impl-Display-for-DecisionVariable"],[92,"impl-Debug-for-Constant"],[93,"impl-Display-for-Constant"],[94,"impl-Debug-for-Expression"],[95,"impl-Display-for-Expression"],[170,"impl-Display-for-RuleApplicationError"],[171,"impl-Debug-for-RuleApplicationError"],[172,"impl-Debug-for-Rule%3C\'a%3E"],[173,"impl-Display-for-Rule%3C\'a%3E"],[199,"impl-Display-for-Solver"],[200,"impl-Debug-for-Solver"]]}],\
["conjure_oxide",{"doc":"","t":"EPPFGNNNCNNNNNNONNNCHCNNNNNNNNNNNCCNNCNNNNNNNNNCNOPPPPGPFGPGPPPPPPPPFGPPPPGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONPGPPPPPINNNNNNNNNNNNNHHHHKPFPPGNNONNNNMNCCNNNNNOGPPPPPNNNNNNNNNNFNNONNNNONNNNCRRRFKNNNCNNMNNMNMNCNNNPPKGFPPNNNNNNNNNNNNNNNNPGFFFPPKPNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Error","KissSAT","Minion","Model","Solver","add_constraint","add_constraints","add_variable","ast","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","constraints","default","deserialize","eq","error","eval_constant","find_conjure","fmt","fmt","fmt","from","from","from_str","get_constraints_vec","into","into","iter","new","parse","rewrite","serialize","set_constraints","solvers","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unstable","update_domain","variables","And","Bool","BoolDomain","Bounded","Constant","Constant","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","Int","IntDomain","Leq","Lt","MachineName","Model","Name","Neq","Not","Nothing","Or","Range","Reference","Single","Sum","SumEq","SumGeq","SumLeq","UserName","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","is_constant","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","sub_expressions","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","variables","with_sub_expressions","Err","Error","JSON","NotImplemented","Ok","Other","Parse","Result","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","conjure_executable","model_from_json","rewrite","rewrite_model","FromConjureModel","InvalidInstance","Model","NotSupported","Other","SolverError","borrow","borrow_mut","constraints","fmt","fmt","from","from","from_conjure","into","kissat","minion","source","to_string","try_from","try_into","type_id","variables","CNFError","ClauseIndexNotFound","NestedAnd","UnexpectedExpression","UnexpectedExpressionInsideNot","VariableNameNotFound","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","MinionModel","borrow","borrow_mut","constraints","default","from","from_conjure","into","named_variables","new","try_from","try_into","type_id","solver_interface","Model","Modifier","Solution","Solver","SolverAdaptor","borrow","borrow_mut","from","incremental","init_solver","into","load_model","load_model","new","solve","solve","solve_mut","solve_mut","solver_states","try_from","try_into","type_id","ArgsInvalid","Error","ModelModifier","ModificationFailure","NotModifiable","OpNotImplemented","OpNotSupported","add_constraint","add_variable","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Error","ExecutionFailure","ExecutionSuccess","Init","ModelLoaded","OpNotImplemented","OpNotSupported","SolverState","TimedOut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"conjure_oxide"],[50,"conjure_oxide::ast"],[183,"conjure_oxide::error"],[204,"conjure_oxide::find_conjure"],[205,"conjure_oxide::parse"],[206,"conjure_oxide::rewrite"],[208,"conjure_oxide::solvers"],[231,"conjure_oxide::solvers::kissat"],[247,"conjure_oxide::solvers::minion"],[260,"conjure_oxide::unstable"],[261,"conjure_oxide::unstable::solver_interface"],[283,"conjure_oxide::unstable::solver_interface::incremental"],[306,"conjure_oxide::unstable::solver_interface::solver_states"],[343,"alloc::vec"],[344,"core::result"],[345,"serde::de"],[346,"core::option"],[347,"core::fmt"],[348,"core::fmt"],[349,"serde::ser"],[350,"alloc::string"],[351,"core::any"],[352,"core::clone"],[353,"core::cmp"],[354,"serde::de"],[355,"serde::ser"],[356,"serde_json::error"],[357,"core::error"],[358,"anyhow"]],"d":["","","","","All supported solvers.","","","","","","","","","","","","","","","Top-level error types for Conjure-Oxide.","Simplify an expression to a constant if possible Returns: …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Unstable and in-development features of Conjure-Oxide.","","","<strong>Supported by:</strong> SAT.","","","","","<strong>Supported by:</strong> Minion, SAT.","","","","Solver Support","","","<strong>Supported by:</strong> Minion.","","","","","","","","","<strong>Supported by:</strong> SAT.","Represents an empty expressionNB: we only expect this at …","<strong>Supported by:</strong> SAT.","","<strong>Supported by:</strong> Minion.","","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a vector of references to the sub-expressions of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of the same expression type with the given …","Contains the error value","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Checks if the conjure executable is present in PATH and if …","","Returns","This rewrites the model by applying the rules to all …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Solver interface to minion_rs.","","","","","","","Error type for CNF adapter","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A lookup table of all named variables.","","","","","A new interface for interacting with solvers.","The native model type of the underlying solver.","The <code>ModelModifier</code> used during incremental search.","The native solution type of the underlying solver.","A Solver executes of a Conjure-Oxide model usign a …","A <code>SolverAdaptor</code> provide an interface to an underlying …","","","Returns the argument unchanged.","Incremental / mutable solving (changing the model during …","","Calls <code>U::from(self)</code>.","","","","Run the solver on the given model.","","Run the solver on the given model, allowing modification …","","States of a <code>Solver</code>.","","","","","An unspecified error has occurred.","A ModelModifier provides an interface to modify a model …","The requested modification to the model has failed.","A <code>ModelModifier</code> for a solver that does not support …","The desired operation is supported by this solver adaptor, …","The desired operation is not supported for this solver …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","An unspecified error has occurred.","The state returned by <code>Solver</code> if solving has not been …","The state returned by <code>Solver</code> if solving has been …","","","The desired function or solver is not implemented yet.","The solver does not support this operation.","","Solving timed-out.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,14,14,0,0,1,1,1,0,1,14,1,14,1,1,1,1,1,1,0,0,0,1,14,14,1,14,14,1,1,14,14,1,0,0,1,1,0,1,14,1,14,14,1,14,1,14,0,1,1,2,10,20,21,0,2,0,0,2,0,2,2,2,10,20,2,2,5,0,0,2,2,2,2,0,2,21,2,2,2,2,5,5,6,20,21,10,2,5,6,20,21,10,2,5,6,20,21,10,2,5,6,20,21,10,2,5,1,5,6,20,21,10,2,6,5,6,20,21,10,2,5,5,6,6,20,21,10,10,2,2,5,6,20,21,10,2,5,5,6,20,21,10,2,2,5,5,6,20,21,10,2,2,5,6,20,21,10,2,5,6,10,2,5,6,20,21,10,2,5,6,20,21,10,2,5,6,20,21,10,2,1,2,35,0,29,29,35,29,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,36,0,36,36,0,36,36,1,36,36,36,36,37,36,0,0,36,36,36,36,36,1,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,0,43,43,43,0,0,46,46,46,0,43,46,43,46,46,43,46,43,46,0,46,46,46,50,50,0,0,0,50,50,44,44,51,50,51,50,51,50,51,50,51,50,51,50,51,50,49,0,0,0,0,49,49,0,49,45,47,48,49,45,47,48,49,45,47,48,49,45,47,48,49,45,47,48,49,45,47,48,49,45,47,48,49],"f":"`````{{bd}f}{{b{h{d}}}f}{{bjl}f}`{ce{}{}}000{bb}{{ce}f{}{}}`{{}b}{c{{n{b}}}A`}{{bb}Ab}`{d{{Af{Ad}}}}`{{bAh}{{n{fAj}}}}{{AlAh}{{n{fAj}}}}0{cc{}}0{An{{n{Al}}}}{b{{h{d}}}};;{{}B`}9``{{bc}nBb}?`={cBd{}}{c{{n{e}}}{}{}}0500{cBf{}}0`{{bjBh}f}`````````````````````````````````{ce{}{}}00000000000{jj}{ll}{BhBh}{{{Bj{c}}}{{Bj{c}}}Bl}{AdAd}{dd}{{ce}f{}{}}00000{{jj}Bn}`{c{{n{j}}}A`}{c{{n{l}}}A`}{c{{n{Bh}}}A`}{c{{n{{Bj{e}}}}}A`C`}{c{{n{Ad}}}A`}{c{{n{d}}}A`}`{{jj}Ab}{{ll}Ab}{{BhBh}Ab}{{{Bj{c}}{Bj{c}}}AbCb}{{AdAd}Ab}{{dd}Ab}{{jAh}{{n{fAj}}}}0{{lAh}{{n{fAj}}}}0{{BhAh}{{n{fAj}}}}{{{Bj{c}}Ah}{{n{fAj}}}Cd}{{AdAh}{{n{fAj}}}}0{{dAh}{{n{fAj}}}}0{cc{}}00000{{jc}fCf}{ce{}{}}00000{dAb}{{jj}{{Af{Bn}}}}{{jc}nBb}{{lc}nBb}{{Bhc}nBb}{{{Bj{c}}e}nChBb}{{Adc}nBb}{{dc}nBb}{d{{Af{{h{d}}}}}}999999{cBd{}}000{c{{n{e}}}{}{}}00000000000{cBf{}}00000`{{d{h{d}}}d}````````=={{CjAh}Cl}0{CnCj}{D`Cj}{cc{}}{ce{}{}}{Cj{{Af{Db}}}}9887{{}{{Dd{f}}}}{An{{Df{b}}}}{dd}{bb}``````55`{{DhAh}Cl}0{CnDh}8{b{{n{DjDh}}}}8``{Dh{{Af{Db}}}}{cBd{}}{c{{n{e}}}{}{}}0{cBf{}}```````<<{{DlAh}Cl}0>=3221`==`{{}Dn}?{b{{n{DnDh}}}}?`1443``````??{cc{}}``{ce{}{}}`{{{El{cEj}}b}{{n{{El{cEn}}f}}}Ef}{c{{El{c}}}Ef}`{{{El{cEn}}}{{n{F`Fb}}}Ef}`0`998```````{d{{n{fFd}}}}{{jBh}{{n{fFd}}}}55556655;;;;::`````````5555555566665555;;;;;;;;::::","c":[],"p":[[5,"Model",0],[6,"Expression",50],[1,"unit"],[5,"Vec",343],[6,"Name",50],[5,"DecisionVariable",50],[6,"Result",344],[10,"Deserializer",345],[1,"bool"],[6,"Constant",50],[6,"Option",346],[5,"Formatter",347],[5,"Error",347],[6,"Solver",0],[1,"str"],[5,"SolverIter",348],[10,"Serializer",349],[5,"String",350],[5,"TypeId",351],[6,"Domain",50],[6,"Range",50],[10,"Clone",352],[6,"Ordering",353],[10,"Deserialize",345],[10,"PartialEq",353],[10,"Debug",347],[10,"Hasher",354],[10,"Serialize",349],[6,"Error",183],[8,"Result",347],[5,"Error",355],[5,"Error",356],[10,"Error",357],[8,"Result",355],[8,"Result",183],[6,"SolverError",208],[10,"FromConjureModel",208],[6,"CNFError",231],[5,"MinionModel",247],[17,"Model"],[17,"Solution"],[17,"Modifier"],[10,"SolverAdaptor",261],[10,"ModelModifier",283],[5,"Init",306],[5,"Solver",261],[5,"ModelLoaded",306],[5,"ExecutionSuccess",306],[6,"ExecutionFailure",306],[6,"ModificationFailure",283],[5,"NotModifiable",283]],"b":[[23,"impl-Display-for-Solver"],[24,"impl-Debug-for-Solver"],[121,"impl-Display-for-Name"],[122,"impl-Debug-for-Name"],[123,"impl-Debug-for-DecisionVariable"],[124,"impl-Display-for-DecisionVariable"],[127,"impl-Display-for-Constant"],[128,"impl-Debug-for-Constant"],[129,"impl-Debug-for-Expression"],[130,"impl-Display-for-Expression"],[193,"impl-Display-for-Error"],[194,"impl-Debug-for-Error"],[195,"impl-From%3CError%3E-for-Error"],[196,"impl-From%3CError%3E-for-Error"],[217,"impl-Display-for-SolverError"],[218,"impl-Debug-for-SolverError"],[239,"impl-Display-for-CNFError"],[240,"impl-Debug-for-CNFError"]]}],\
["conjure_rules",{"doc":"A decentralised rule registry for Conjure Oxide","t":"HHX","n":["get_rule_by_name","get_rules","register_rule"],"q":[[0,"conjure_rules"],[3,"conjure_core::rule"],[4,"core::option"],[5,"alloc::vec"]],"d":["","Returns a copied <code>Vec</code> of all rules registered with the …","This procedural macro registers a decorated function with …"],"i":[0,0,0],"f":"{b{{f{d}}}}{{}{{h{d}}}}`","c":[],"p":[[1,"str"],[5,"Rule",3],[6,"Option",4],[5,"Vec",5]],"b":[]}],\
["minion_rs",{"doc":"This crate provides low level Rust bindings to the Minion …","t":"ICCHPPPGPGPPPPFPPPPFGGIPNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNPGPPGPPNNNNNNNNNNNNNNNNNNNNNNNN","n":["Callback","ast","error","run_minion","Bool","Bool","Bound","Constant","ConstantAsVar","Constraint","Discrete","Eq","Ineq","Integer","Model","NameRef","SparseBound","SumGeq","SumLeq","SymbolTable","Var","VarDomain","VarName","WatchedAnd","add_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","contains","default","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_variable_order","get_vartype","into","into","into","into","into","into","named_variables","new","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","InvalidInstance","MinionError","NotImplemented","Other","RuntimeError","RuntimeError","UnknownError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"minion_rs"],[4,"minion_rs::ast"],[82,"minion_rs::error"],[113,"core::result"],[114,"core::option"],[115,"core::fmt"],[116,"core::fmt"],[117,"core::any"],[118,"anyhow"],[119,"core::error"],[120,"alloc::string"]],"d":["Callback function used to capture results from minion as …","The Model Syntax tree for the Minion bindings.","Error types for Minion bindings.","Run Minion on the given Model.","","","","","","","","","","","","","","","","","A variable can either be a named variable, or an anomynous …","","","","Creates a new variable and adds it to the symbol table. If …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A lookup table of all named variables.","","","","","","","","","","","","","","","","","","","","","The model given to Minion is invalid.","A wrapper over all errors thrown by <code>minion_rs</code>.","","","RuntimeErrors are thrown by Minion during execution.","","An unknown error has occurred.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,11,8,8,0,15,0,8,12,12,11,0,15,8,12,12,0,0,0,0,12,6,1,6,12,15,11,8,1,6,12,15,11,8,8,8,1,6,1,11,12,15,11,8,1,6,12,15,11,8,6,6,1,6,12,15,11,8,1,1,8,1,6,12,15,11,8,1,6,12,15,11,8,1,6,12,15,11,8,18,0,4,4,0,4,18,4,18,4,18,4,4,18,18,4,4,4,18,18,4,18,4,4,18,4,18,4,18,4,18],"f":"```{{bd}{{j{fh}}}}````````````````````{{lnA`}{{Ab{f}}}}{ce{}{}}00000000000{A`A`}{{ce}f{}{}}`{{ln}Ad}{{}b}{{AfAf}Ad}{{AhAj}Al}{{AnAj}Al}{{AfAj}Al}{{A`Aj}Al}{cc{}}00000{l{{B`{n}}}}{{ln}{{Ab{A`}}}}<<<<<<`8<{c{{j{e}}}{}{}}00000000000{cBb{}}00000```````>>>>{{hAj}Al}0{{BdAj}Al}0{Bdh}{Bfh}88{BhBd}{ce{}{}}0{h{{Ab{Bj}}}}{cBl{}}0999988","c":[],"p":[[5,"Model",4],[8,"Callback",0],[1,"unit"],[6,"MinionError",82],[6,"Result",113],[5,"SymbolTable",4],[8,"VarName",4],[6,"VarDomain",4],[6,"Option",114],[1,"bool"],[6,"Constant",4],[6,"Constraint",4],[5,"Formatter",115],[8,"Result",115],[6,"Var",4],[5,"Vec",116],[5,"TypeId",117],[6,"RuntimeError",82],[5,"Error",118],[1,"u32"],[10,"Error",119],[5,"String",120]],"b":[[93,"impl-Debug-for-MinionError"],[94,"impl-Display-for-MinionError"],[95,"impl-Debug-for-RuntimeError"],[96,"impl-Display-for-RuntimeError"],[97,"impl-From%3CRuntimeError%3E-for-MinionError"],[98,"impl-From%3CError%3E-for-MinionError"]]}],\
["uniplate",{"doc":"A port of Haskell’s Uniplate in Rust.","t":"CKNNNNNNMN","n":["uniplate","Uniplate","children","descend","fold","one_holed_context","rewrite","transform","uniplate","universe"],"q":[[0,"uniplate"],[1,"uniplate::uniplate"],[10,"alloc::vec"],[11,"core::ops::function"],[12,"alloc::boxed"],[13,"core::option"]],"d":["","","Get the DIRECT children of a node.","Perform a transformation on all the immediate children, …","Perform a fold-like computation on each value.","Get the nth one holed context.","Rewrite by applying a rule everywhere you can.","Apply the given rule to all nodes bottom up.","","Get all children of a node, including itself and all …"],"i":[0,0,1,1,1,1,1,1,1,1],"f":"``{b{{d{b}}}}{bb}{bc{}}{{bf}{{l{{j{h}}}}}}22{b{{n{{d{b}}{j{h}}}}}}4","c":[],"p":[[10,"Uniplate",1],[5,"Vec",10],[1,"usize"],[10,"Fn",11],[5,"Box",12],[6,"Option",13],[1,"tuple"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
